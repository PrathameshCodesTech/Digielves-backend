"""
Django settings for configuration project.

Generated by 'django-admin startproject' using Django 4.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
import datetime
from django.conf import settings

# from configuration.middleware.middleware import PageNotFoundMiddleware


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-!-saf7kiv4e$#)+*%%r12=#69ln2u_4x1tdy5b&$kq(2-!0u9k'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ['https://ordinet.store','ordinet.store', '*' ]
AUTH_USER_MODEL = 'digielves_setup.User'
CORS_ALLOW_ALL_ORIGINS=True


SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SECURE = True
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
SECURE_REFERRER_POLICY = 'same-origin'


FFMPEG_BINARY = r'C:\Users\Asus\Desktop\ml_project\ffmpeg'





ZOOM_ACCESS_TOKEN = None  
 

######################################################################################
#Enable while putting on the production to restrict API hits from other IP's
######################################################################################

CORS_ORIGIN_WHITELIST = [
     'https://ordinet.store', '*'
       #'https://example.com',
 ]






# settings.py

# Celery Configuration
CELERY_BROKER_URL = "redis://13.127.144.141:6379"
CELERY_RESULT_BACKEND = "redis://13.127.144.141:6379"

CELERY_BROKER_CONNECTION_RETRY_ON_STARTUP = True
######################################################################################
#Enable while putting on the production to restrict API hits from other Servers
######################################################################################

# CSP_DEFAULT_SRC = ("'self'",)
# CSP_SCRIPT_SRC = ("'self'", "'unsafe-inline'", "https://example.com")
# CSP_STYLE_SRC = ("'self'", "'unsafe-inline'")
# CSP_IMG_SRC = ("'self'", "data:")

ALLOWED_HOSTS = ['*']


CORS_ALLOW_METHODS = [
    'GET',  
    'POST',
    'PUT',
    'PATCH',
    'DELETE',
    'OPTIONS',
]


CORS_ALLOWED_ORIGINS = [
    'https://ordinet.store' # Add the origin(s) you want to allow
]

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": datetime.timedelta(days=5),
    "REFRESH_TOKEN_LIFETIME": datetime.timedelta(days=10),
    "ROTATE_REFRESH_TOKENS": False,
    "BLACKLIST_AFTER_ROTATION": False,
    "UPDATE_LAST_LOGIN": False,

    "ALGORITHM": "HS256",
    "SIGNING_KEY": SECRET_KEY,
    "VERIFYING_KEY": "",
    "AUDIENCE": None,
    "ISSUER": None,
    "JSON_ENCODER": None,
    "JWK_URL": None,
    "LEEWAY": 0,

    "AUTH_HEADER_TYPES": ("Bearer",),
    "AUTH_HEADER_NAME": "HTTP_AUTHORIZATION",
    "USER_ID_FIELD": "id",
    "USER_ID_CLAIM": "user_id",
    "USER_AUTHENTICATION_RULE": "rest_framework_simplejwt.authentication.default_user_authentication_rule",

    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
    "TOKEN_TYPE_CLAIM": "token_type",
    "TOKEN_USER_CLASS": "rest_framework_simplejwt.models.TokenUser",

    "JTI_CLAIM": "jti",

    "SLIDING_TOKEN_REFRESH_EXP_CLAIM": "refresh_exp",
    "SLIDING_TOKEN_LIFETIME": datetime.timedelta(minutes=5),
    "SLIDING_TOKEN_REFRESH_LIFETIME": datetime.timedelta(days=1),

    "TOKEN_OBTAIN_SERIALIZER": "rest_framework_simplejwt.serializers.TokenObtainPairSerializer",
    "TOKEN_REFRESH_SERIALIZER": "rest_framework_simplejwt.serializers.TokenRefreshSerializer",
    "TOKEN_VERIFY_SERIALIZER": "rest_framework_simplejwt.serializers.TokenVerifySerializer",
    "TOKEN_BLACKLIST_SERIALIZER": "rest_framework_simplejwt.serializers.TokenBlacklistSerializer",
    "SLIDING_TOKEN_OBTAIN_SERIALIZER": "rest_framework_simplejwt.serializers.TokenObtainSlidingSerializer",
    "SLIDING_TOKEN_REFRESH_SERIALIZER": "rest_framework_simplejwt.serializers.TokenRefreshSlidingSerializer",
}

CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]


DEFAULT_APPS = [
    # 'channels',
    # 'daphne',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

CUSTOM_APPS = [
        'digielves_setup',
        'administrator',
        'employee', 
        'doctor',
        'organization',
        'meet',
        'ai',
        'admin_app'

]

EXTERNAL_APPS = [
    'django_extensions',
    'rest_framework',
    'corsheaders',
    'rest_framework_simplejwt',
    'csp',
    'celery'    
    ]

SWAGGER=[
    'rest_framework_swagger',
    'drf_yasg',
]

SWAGGER_SETTINGS = {
    'SHOW_REQUEST_HEADERS': True,
    'SECURITY_DEFINITIONS': {
        'Bearer': {
            'type': 'apiKey',
            'name': 'Authorization',
            'in': 'header'
        }
    },
    'USE_SESSION_AUTH': False,
    'JSON_EDITOR': True,
    'SUPPORTED_SUBMIT_METHODS': [
        'get',
        'post',
        'put',
        'delete',
        'patch'
    ],
}
# Application definition

INSTALLED_APPS = DEFAULT_APPS + CUSTOM_APPS + EXTERNAL_APPS + SWAGGER+['django_crontab']



MIDDLEWARE = [
    'configuration.middlewaree.PerformanceMiddleware',
    # 'channels.middleware.AsgiMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.gzip.GZipMiddleware',

    'configuration.middleware.xss_middleware.XSSProtectionMiddleware',

    # 'configuration.middleware.PageNotFoundMiddleware',
    # 'csp.middleware.CSPMiddleware',



]

ROOT_URLCONF = 'configuration.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# ASGI_APPLICATION = 'configuration.asgi.application'



CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [("13.127.144.141", 6379)],
        },
    },
}

# CHANNEL_LAYERS = {
   
#     "default": {"BACKEND": "channels.layers.InMemoryChannelLayer"},
# }

# ASGI_APPLICATION = 'configuration.asgi.application'
WSGI_APPLICATION = 'configuration.wsgi.application'



# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# DATABASES = {
    
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql',                  
#         'NAME': "mybuddy_database",                      
#         'USER': "mybuddy_user",
#         'PASSWORD': "123456",
#         'HOST': "127.0.0.1",
#         'PORT': "5432",
#     }
# }

# DATABASES = {
    
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql',

#         'NAME': "digielves_db",                      
#         'USER': "buddy1_db_user",
#         'PASSWORD': "123456",
#         'HOST': "13.127.144.141",

#         'PORT': "5432",
#     }
# }

ZOOM_CLIENT_ID = '56JeTEUTJ27OGMBMqj14Q'
ZOOM_CLIENT_SECRET = 'rWaRTU0Wj0uslrVA55zeNIDGvnjBc1tp'


DATABASES = {
    
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': "digielves_db3",                      
        'USER': "digielves_db2_user",
        'PASSWORD': "Buth@*87##",
        'HOST': "13.127.144.141",

        'PORT': "5432",
    }
}
# DATABASES = {
    
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': "sqlite3.db",                      
#         # 'USER': "digielves_db_user",
#         # 'PASSWORD': "Buth@*87##",
#         # 'HOST': "13.127.144.141",

#         # 'PORT': "5432",
#     }
# }

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]




REST_FRAMEWORK = {
    
      'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.AnonRateThrottle',
        'rest_framework.throttling.UserRateThrottle',
    ],
    'DEFAULT_THROTTLE_RATES': {
        'anon': '4000/hour',
        'user': '4000/hour',
    },
    
     'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES':(
           'rest_framework.permissions.IsAuthenticated',
           'rest_framework.permissions.AllowAny',
     ),
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
    )

}

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Kolkata'


USE_I18N = True 
USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

MEDIA_URL='/api/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')








CRONJOBS = [
    # on every 1 minute
    ('*/1 * * * *', 'digielves_setup.cron_task.check_overdue.check_overdue_tasks'),
    # every 4 minute
    ('*/4 * * * *', 'digielves_setup.cron_task.upcoming_appointments.check_upcoming_appointments'),
    # Run the task every day at 2:30 AM
    ('30 2 * * *', 'digielves_setup.cron_task.delete_task.check_and_delete_tasks'),
    # on every 2 min
    ('*/2 * * * *', 'digielves_setup.cron_task.upcoming_meeting.check_upcoming_meeting'),
    
    ('*/10 * * * *', 'digielves_setup.cron_task.next_followup_date.check_next_followup_date'),
    
    ('*/5 * * * *', 'digielves_setup.cron_task.find_ending_work_slots.get_users_with_ending_slots'),
    ('*/20 * * * *', 'digielves_setup.cron_task.check_nd_update_meeting_status.check_and_update_meeting_status'),

]



import logging

logger = logging.getLogger('api_hits')
logger.setLevel(logging.DEBUG)

# Create a file handler and set the level to DEBUG
file_handler = logging.FileHandler('api_hits.log')
# file_handler.setLevel(logging.DEBUG)
file_handler.setLevel(logging.INFO)

# Create a formatter and set the format for the log messages
formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
file_handler.setFormatter(formatter)

# Add the file handler to the logger
logger.addHandler(file_handler)

# If DEBUG is not enabled in production
# if not settings.DEBUG:
#     logger.setLevel(logging.INFO)
    